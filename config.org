#+TITLE: GNU Emacs config
#+AUTHOR: Olivier Bonaldo
#+DESCRIPTION: My org-mode configuration file for emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes

* GNU Emacs configuration
** Startup
#+begin_src emacs-lisp
  (setq user-full-name "Olivier"
	user-mail-address "myolisns@gmail.com")
#+end_src
** XDG directory specification
#+begin_src emacs-lisp
  (defvar xdg-bin (getenv "XDG_BIN_HOME")
    "The XDG bin base directory.")

  (defvar xdg-cache (getenv "XDG_CACHE_HOME")
    "The XDG cache base directory.")

  (defvar xdg-config (getenv "XDG_CONFIG_HOME")
    "The XDG config base directory.")

  (defvar xdg-data (getenv "XDG_DATA_HOME")
    "The XDG data base directory.")

  (defvar xdg-lib (getenv "XDG_LIB_HOME")
    "The XDG lib base directory.")
#+end_src
** Server
#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src
** Package Manager
Boostrap =straight.el= as a package manager 
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
** Better defaults
#+begin_src emacs-lisp
  (setq-default
     repeat-mode +1
     vertical-scroll-bars -1
     ad-redefinition-action 'accept         ; Silence warnings for redefinition
     auto-save-list-file-prefix nil         ; Prevent tracking for auto-saves
     bidi-paragraph-direction 'left-to-right
     bidi-inhibit-bpa t
     global-so-long-mode 1
     create-lockfiles nil                   ; Locks are more nuisance than blessing
     cursor-in-non-selected-windows nil     ; Hide the cursor in inactive windows
     cursor-type '(hbar . 2)                ; Underline-shaped cursor
     custom-unlispify-menu-entries nil      ; Prefer kebab-case for titles
     custom-unlispify-tag-names nil         ; Prefer kebab-case for symbols
     delete-by-moving-to-trash t            ; Delete files to trash
     epg-pinentry-mode 'loopback            ; Redirect passphrase prompts to self
     fill-column 80                         ; Set width for automatic line breaks
     gc-cons-threshold (* 8 1024 1024)      ; We're not using Game Boys anymore
     help-window-select t                   ; Focus new help windows when opened
     indent-tabs-mode nil                   ; Stop using tabs to indent
     inhibit-startup-screen t               ; Disable start-up screen
     initial-scratch-message ""             ; Empty the initial *scratch* buffer
     initial-major-mode #'org-mode          ; Prefer `org-mode' for *scratch*
     mouse-yank-at-point t                  ; Yank at point rather than pointer
     native-comp-async-report-warnings-errors nil ; Skip error buffers
     native-comp-deferred-compilation t
     read-process-output-max (* 1024 1024)  ; Increase read size for data chunks
     recenter-positions '(5 bottom)         ; Set re-centering positions
     scroll-conservatively 101              ; Avoid recentering when scrolling far
     scroll-margin 1                        ; Add a margin when scrolling vertically
     select-enable-clipboard t              ; Merge system's and Emacs' clipboard
     sentence-end-double-space nil          ; Use a single space after dots
     show-help-function nil                 ; Disable help text everywhere
     tab-always-indent 'complete            ; Indent first then try completions
     tab-width 4                            ; Smaller width for tab characters
     uniquify-buffer-name-style 'forward    ; Uniquify buffer names
     use-short-answers t                    ; Replace yes/no prompts with y/n
     vc-follow-symlinks t                   ; Never prompt when visiting symlinks
     window-combination-resize t            ; Resize windows proportionally
     x-stretch-cursor t)                    ; Stretch cursor to the glyph width
    (blink-cursor-mode 0)                   ; Prefer a still cursor
    (delete-selection-mode 1)               ; Replace region when inserting text
    (global-subword-mode 1)                 ; Iterate through CamelCase words
    (global-auto-revert-mode t)
    (mouse-avoidance-mode 'exile)           ; Avoid collision of mouse with point
    (put 'downcase-region 'disabled nil)    ; Enable `downcase-region'
    (put 'scroll-left 'disabled nil)        ; Enable `scroll-left'
    (put 'upcase-region 'disabled nil)      ; Enable `upcase-region'
    (set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
#+end_src
** Backups
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name (format "%s/emacs/auto-save/" xdg-cache) t)))
        backup-directory-alist `(("." . ,(expand-file-name (format "%s/emacs/backups/" xdg-data))))
        vc-make-backup-files t
        version-control t
        kept-old-versions 0
        kept-new-versions 10
        delete-old-versions t
        backup-by-copying t)
#+end_src
** Customizations
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name ( format"%s/emacs/custom-file.el" xdg-data)))
  (when (file-exists-p custom-file)
    (load custom-file t))
#+end_src
** History
#+begin_src emacs-lisp
  (require 'savehist)
  (setq savehist-file (expand-file-name (format "%s/emacs/history" xdg-cache)))
  (savehist-mode t)
#+end_src
** Recent files
#+begin_src emacs-lisp
  (require 'recentf)
  (global-set-key (kbd "C-x C-r") 'recentf-open-files)
  (setq recentf-max-menu-items 25
        recentf-max-saved-items 200
        recentf-exclude (list "/scp:"
                             "/ssh:"
                             "/sudo:"
                             "/tmp/"
                             "~$"
                             "COMMIT_EDITMSG")
        recentf-save-file (expand-file-name (format "%s/emacs/recentf" xdg-cache)))
  (recentf-mode 1)
#+end_src
** Icons and Emojis
Icons
#+begin_src emacs-lisp
  (straight-use-package 'all-the-icons)
  (straight-use-package 'all-the-icons-dired)
  (straight-use-package 'all-the-icons-completion)
#+end_src
Emojis
#+begin_src emacs-lisp
  (straight-use-package 'emojify)
  (require 'emojify)
  (global-emojify-mode)
#+end_src
** Fonts
#+begin_src emacs-lisp 
  (straight-use-package 'fontaine)
  (setq fontaine-presets
        '((regular
           :default-height 110)
          (small
           :default-height 100)
          (large
           :default-weight semilight
           :default-height 180
           :bold-weight extrabold)
          (extra-large
           :default-weight semilight
           :default-height 210
           :line-spacing 5
           :bold-weight ultrabold)
          (t                        ; our shared fallback properties
           :default-family "FiraCode Nerd Font Mono")))
  (fontaine-set-preset 'regular)

  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
  ;; (add-to-list 'default-frame-alist '(font . "Source Code Pro-12"))
  ;; changes certain keywords to symbols, such as lamda!
  (setq global-prettify-symbols-mode t)

  ;; zoom in/out like we do everywhere else.
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** Themes
Doom-themes
#+begin_src emacs-lisp
  (straight-use-package 'doom-themes)
  (require 'doom-themes)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italics t)
  (load-theme 'doom-tokyo-night t)
#+end_src
Doom-modeline
#+begin_src emacs-lisp
  (straight-use-package 'doom-modeline)
  (require 'doom-modeline)
  (doom-modeline-mode 1)

  ;; Customize
  ;; If non-nil, cause imenu to see `doom-modeline' declarations.
  ;; This is done by adjusting `lisp-imenu-generic-expression' to
  ;; include support for finding `doom-modeline-def-*' forms.
  ;; Must be set before loading doom-modeline.
  (setq doom-modeline-support-imenu t)

  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 25)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 4)

  ;; Whether to use hud instead of default bar. It's only respected in GUI.
  (setq doom-modeline-hud nil)

  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be
  ;; displayed. It can be an integer or a float number. `nil' means no limit."
  (setq doom-modeline-window-width-limit 85)

  ;; How to detect the project root.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'auto)

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   auto => emacs/l/comint.el (in a project) or comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'auto)

  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon t)

  ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display the colorful icon for `major-mode'.
  ;; It respects `nerdg-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display the modification icon for the buffer.
  ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; Whether display the time icon. It respects variable `doom-modeline-icon'.
  (setq doom-modeline-time-icon t)

  ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  (setq doom-modeline-unicode-fallback nil)

  ;; Whether display the buffer name.
  (setq doom-modeline-buffer-name t)

  ;; Whether highlight the modified buffer name.
  (setq doom-modeline-highlight-modified-buffer-name t)

  ;; Whether display the minor modes in the mode-line.
  (setq doom-modeline-minor-modes nil)

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)

  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info nil)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)

  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display the workspace name. Non-nil to display in the mode-line.
  (setq doom-modeline-workspace-name t)

  ;; Whether display the perspective name. Non-nil to display in the mode-line.
  (setq doom-modeline-persp-name t)

  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)

  ;; If non nil the perspective name is displayed alongside a folder icon.
  (setq doom-modeline-persp-icon t)

  ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)

  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display the modal state.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal t)

  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)

  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  ;;(setq doom-modeline-mu4e nil)
  ;; also enable the start of mu4e-alert
  ;;(mu4e-alert-enable-mode-line-display)

  ;; Whether display the gnus notifications.
  (setq doom-modeline-gnus t)

  ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
  (setq doom-modeline-gnus-timer 2)

  ;; Wheter groups should be excludede when gnus automatically being updated.
  (setq doom-modeline-gnus-excluded-groups '("dummy.group"))

  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)

  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)

  ;; Whether display the battery status. It respects `display-battery-mode'.
  (setq doom-modeline-battery t)

  ;; Whether display the time. It respects `display-time-mode'.
  (setq doom-modeline-time t)

  ;; Whether display the misc segment on all mode lines.
  ;; If nil, display only if the mode line is active.
  (setq doom-modeline-display-misc-in-all-mode-lines t)

  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")

  ;; What to display as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; By default, almost all segments are displayed only in the active window. To
  ;; display such segments in all windows, specify e.g.
  (setq doom-modeline-always-visible-segments '(mu4e irc))

  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
#+end_src
** Flymake
#+begin_src emacs-lisp
  (straight-use-package 'flymake)

  (add-hook 'prog-mode-hook #'(lambda () (flymake-mode t)))

  (global-set-key (kbd "M-g d") 'flymake-show-buffer-diagnostics)
  (global-set-key (kbd "M-g M-d") 'flymake-show-project-diagnostics)
  (global-set-key (kbd "M-g M-n") 'flymake-goto-next-error)
  (global-set-key (kbd "M-g M-p") 'flymake-goto-prev-error)

 ;; (define-key flymake-diagnostics-buffer-mode-map (kbd "?") 'flymake-show-diagnostic-here)
 ;; (define-key flymake-project-diagnostics-mode-map (kbd "?") 'flymake-show-diagnostic-here)


  (defun flymake-show-diagnostic-here (pos &optional other-window)
        "Show the full diagnostic of this error.
    Used to see multiline flymake errors"
        (interactive (list (point) t))
        (let* ((id (or (tabulated-list-get-id pos)
                       (user-error "Nothing at point")))
               (text (flymake-diagnostic-text (plist-get id :diagnostic))))
          (message text)))
  (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake)
#+end_src
** Vertico
#+begin_src emacs-lisp
  (straight-use-package 'vertico)
  (add-to-list 'load-path (expand-file-name "straight/build/vertico/extensions/" straight-base-dir))
  (require 'vertico)
  (require 'vertico-directory)

  ;; Setup `vertico'
  (setq vertico-cycle t)
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
  (vertico-mode 1)
#+end_src
** Marginalia
#+begin_src emacs-lisp
  (straight-use-package 'marginalia)
  (require 'marginalia)
  ;; Setup `marginalia'
  (setq marginalia-annotators
        '(marginalia-annotators-heavy marginalia-annotators-light nil)
        minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt)
        enablie-recursive-minibuffers t)
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  (marginalia-mode 1)

  (with-eval-after-load 'marginalia
    (add-hook 'marginalia-mode-hook 'all-the-icons-completion-marginalia-setup))
#+end_src
** Orderless
#+begin_src emacs-lisp
  (straight-use-package 'orderless)
  (require 'orderless)
  (setq completion-styles '(orderless flex))
#+end_src
** Consult
#+begin_src emacs-lisp
  (straight-use-package 'consult)

  (with-eval-after-load 'vertico
    (require 'consult))

  (setq completion-in-region-function #'consult-completion-in-region)
#+end_src
*** Consult-dir
#+begin_src emacs-lisp
  (straight-use-package 'consult-dir)
  (global-set-key (kbd "C-x C-j") 'consult-dir)
  (define-key vertico-map (kbd "C-x C-j") 'consult-dir)
#+end_src
*** Consult-recoll
#+begin_src emacs-lisp
  (straight-use-package 'consult-recoll)
  (require 'consult-recoll)

  (setq consult-recoll-inline-snippets t)

  (defun recoll-index (&optional arg) (interactive)
        (start-process-shell-command "recollindex"
                                     "*recoll-index-process*"
                                     "recollindex"))

  (global-set-key (kbd "M-s r") 'counsel-recoll)
  (global-set-key (kbd "C-c I") 'recoll-index)
#+end_src
** Embark
#+begin_src emacs-lisp
  (straight-use-package 'embark)
  (straight-use-package 'embark-consult)
  (require 'embark)

  (with-eval-after-load 'embark
    (require 'embark-consult))

  ;;(add-hook embark-collect-mode-hook #'consult-preview-at-point-mode)

  (setq embark-indicators
       '(embark-highlight-indicator
         embark-isearch-highlight-indicator
         embark-minimal-indicator)
       prefix-help-command  #'embark-prefix-help-command
       embark-prompter 'embark-completing-read-prompter)

  (global-set-key (kbd "C-.") 'embark-act)
#+end_src
** Dired-mode
#+begin_src emacs-lisp
  (require 'dired)
  (straight-use-package 'dired-open)
  (straight-use-package 'dired-hide-dotfiles)
  (straight-use-package 'dired-subtree)

  (setq dired-auto-revert-buffer t
        dired-dwim-target t
        dired-hide-details-hide-symlink-targets nil
        dired-listing-switches "-alh --group-directories-first"
        dired-ls-F-marks-symlinks nil
        dired-recursive-copies 'always)

  (require 'dired-open)
  (setq dired-open-extensions '(("mp4" . "mpv")))

;;  (if (display-graphic-p)
;;      (add-hook 'dired-mode-hook #'all-the-icons-dired-mode))

  (add-hook 'dired-mode-hook #'dired-hide-dotfiles-mode)
  (define-key dired-mode-map (kbd "H") 'dired-hide-dotfiles-mode)

  (with-eval-after-load 'dired
    (require 'dired-subtree)
    (define-key dired-mode-map (kbd "<tab>") 'dired-subtree-toggle))
#+end_src
** Documentation
#+begin_src emacs-lisp
  (straight-use-package 'helpful)
#+end_src
** Indentations
#+begin_src emacs-lisp
  (straight-use-package 'highlight-indent-guides)
  (straight-use-package 'aggressive-indent)

  (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
  (setq aggressive-indent-comments-too t)
  (setq highlight-indent-guides-method 'character)
#+end_src
** LSP
#+begin_src emacs-lisp
  (straight-use-package 'lsp-mode)
  (straight-use-package 'lsp-ui)
  (straight-use-package 'consult-lsp)

  ;; General lsp-mode settings
  (setq lsp-completion-provider :none
        lsp-enable-snippet nil
        lsp-enable-on-type-formatting nil
        read-process-output-max (* 1024 1024)
        lsp-enable-indentation nil
        lsp-diagnostics-provider :flymake
        lsp-session-file (expand-file-name (format "%s/emacs/lsp-session-v1"  xdg-data))
        lsp-keymap-prefix "C-x L")

  ;; to enable the lenses
  (add-hook 'lsp-mode-hook #'lsp-lens-mode)
  (add-hook 'lsp-completion-mode-hook
            (lambda ()
              (setf (alist-get 'lsp-capf completion-category-defaults)
                    '((styles . (orderless flex))))))

  (add-hook 'lsp-mode-hook #'lsp-ui-mode)
#+end_src
** Magit
#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (straight-use-package 'forge)
  (straight-use-package 'diff-hl)

  (global-set-key (kbd "C-x v SPC") 'magit-status)
  (define-key project-prefix-map (kbd "m") 'project-magit)

  ;;(add-to-list 'project-switch-commands
  ;;                 '(project-magit "Magit" m))

  (defun project-magit  ()
        (interactive)
        (let ((dir (project-root (project-current t))))
          (magit-status dir)))

  (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
  (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-post-refresh)

  (global-diff-hl-mode 1)
  (diff-hl-flydiff-mode 1)
#+end_src
** DAP Mode
#+begin_src emacs-lisp
  (straight-use-package 'dap-mode)
  (with-eval-after-load 'lsp-mode
    (require 'dap-mode))

  (dap-mode t)
  (dap-ui-mode t)
#+end_src
** Corfu
#+begin_src emacs-lisp
  (straight-use-package 'corfu)
  (straight-use-package 'corfu-terminal)
  (add-hook 'load-path (expand-file-name "straight/build/corfu/extensions" straight-base-dir))
  (require 'corfu-popupinfo)
  (require 'corfu)

  (unless (display-graphic-p)
    (require 'corfu-terminal)
    (corfu-terminal-mode +1))

  (setq corfu-cycle t                 ; Allows cycling through candidates
        corfu-auto t               ; Enable auto completion
        corfu-auto-prefix 2
        corfu-auto-delay 0.0
        corfu-popupinfo-delay '(0.5 . 0.2)
        corfu-preview-current 'insert ; Do not preview current candidate
        corfu-preselect-first nil
        corfu-on-exact-match nil      ; Don't auto expand tempel snippets
        )

  (global-corfu-mode 1)
  ;;(corfu-history-mode 1)
  (corfu-popupinfo-mode 1)
  (eldoc-add-command #'corfu-insert)
#+end_src
** Project
#+begin_src emacs-lisp
  (global-set-key (kbd "M-s M-s") 'project-find-file)
  (define-key project-prefix-map (kbd "m") 'project-magit)
  (define-key project-prefix-map (kbd "d") 'project-dired)

  (setq project-switch-commands
          '((project-find-file "Find file" f)
            (project-dired "Dired" d)
            (project-vc-dir "VC-Dir" v)
            (project-eshell "Eshell" e)
            (project-shell "Shell" s)))

   ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;; 1. project.el (project-roots)
    (setq consult-project-function
          (lambda (may-prompt)
            (when-let* ((project (project-current))
                        (project-root (car (project-roots (project-current))))
                        (is-not-home
                         (not (string= "/home/olie/" (car (project-roots
                                                              (project-current)))))))
              project-root)))

    (defvar project-root-markers
      '(".git" "spago.dhall" "CMakeList.txt" "package.clj"
        "package.json" "mix.exs" "Project.toml" ".project" "Cargo.toml"
        "qlfile"))

    (defun my/project-find-root (path)
      (let* ((this-dir (file-name-as-directory (file-truename path)))
             (parent-dir (expand-file-name (concat this-dir "../")))
             (system-root-dir (expand-file-name "/")))
        (cond
         ((my/project-root-p this-dir) (cons 'transient this-dir))
         ((equal system-root-dir this-dir) nil)
         (t (my/project-find-root parent-dir)))))

    (defun my/project-root-p (path)
      (let ((results (mapcar (lambda (marker)
                               (file-exists-p (concat path marker)))
                             project-root-markers)))
        (eval `(or ,@ results))))

    (add-to-list 'project-find-functions #'my/project-find-root)
#+end_src
** CAPE
#+begin_src emacs-lisp
  (straight-use-package 'cape)
  ;; Setup Cape for better completion-at-point support and more
  (require 'cape)

  ;; Add useful defaults completion sources from cape
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)

  ;; Silence the pcomplete capf, no errors or messages!
  ;; Important for corfu
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
  (add-hook 'eshell-mode-hook
            (lambda () (setq-local corfu-quit-at-boundary t
                              corfu-quit-no-match t
                              corfu-auto nil)
              (corfu-mode)))
#+end_src
** PDF
#+begin_src emacs-lisp
  (straight-use-package 'pdf-tools)

  (pdf-tools-install :no-query)

  (with-eval-after-load 'pdf-tools
    (require 'pdf-view))

  (setq pdf-view-display-size 'fit-page
        pdf-view-resize-factor 1.1
        pdf-view-use-unicode-ligther nil
        pdf-view-use-scaling t)

  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  (define-key pdf-view-mode-map (kbd "d") 'pdf-annot-delete)
  (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
  (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
#+end_src
** Prog Modes
*** Misc
#+begin_src emacs-lisp
  ;; Bash
  (add-hook 'sh-mode #'lsp-deferred)
  ;; CSV
  (straight-use-package 'csv-mode)
  (add-to-list 'auto-mode-alist '("\\.\\(csv\\|tsv\\)\\'") 'csv-mode)
  ;; Dockerfile
  (straight-use-package 'dockerfile-mode)
  (add-to-list 'auto-mode-alist '("Dockerfile\\'"))
  ;; EPUB
  (straight-use-package 'nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" ) 'nov-mode)
  ;; GNUPLOT
  (straight-use-package 'gnuplot)
  (add-to-list 'auto-mode-alist '("\\.\\(gp\\|gpi\\|plt\\)'") 'gnuplot-mode)
  ;;(define-key gnuplot-mode-map (kbd "C-c C-c") 'gnuplot-send-buffer-to-gnuplot)
  ;; INI
  (straight-use-package 'ini-mode)
  (add-to-list 'auto-mode-alist '("\\.ini\\'" ) 'ini-mode)
  ;; XML
  (require 'nxml-mode)
  (add-to-list 'auto-mode-alist '("\\.\\(xml\\|xsd\\|wsdl\\)\\'") 'nxml-mode)
  (add-hook 'nxml-mode-hook #'lsp-deferred)
  ;; YAML
  (straight-use-package 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.\\(yaml\\|yml\\)\\'") 'yaml-mode)
  (add-hook 'yaml-mode-hook #'lsp-deferred)
#+end_src
*** Web-Mode
#+begin_src emacs-lisp
  (straight-use-package 'web-mode)

  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
            (funcall (cdr my-pair)))))

  (add-to-list 'auto-mode-alist '("\\.\\(html\\|jsx\\|php\\)\\'") 'web-mode)
  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '("\\.jsx?\\'" . prettier-js-mode))))

  (setq web-mode-attr-indent-offset 2
        web-mode-block-padding 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-comment-style 2
        web-mode-enable-current-element-highlight t
        web-mode-markup-indent-offset 2)

  ;; Emmet
  (straight-use-package 'emmet-mode)
  (add-hook 'js-jsx-mode-hook #'emmet-jsx-major-mode)
  (add-hook 'typescript-mode-hook #'emmet-jsx-major-mode)

  (defun my/emmet-expand-capf ()
    (let ((bounds (bounds-of-thing-at-point 'symbol))
          (tap (thing-at-point 'symbol)))
      (list (car bounds) (cdr bounds)
            ;; Just return the symbol at point to so completion will be possible
            ;; TODO Determine if there is a less hacky option
            (lambda (string pred action) (list (thing-at-point 'symbol)))
            ;; Annotate with what emmet expands to
            ;; TODO find a way for this to show since right now
            ;; corfu doesn't display this on a single completion
            :annotation-function (lambda (str) (emmet-transform str))
            ;; Don't try to complete with emmet if there is no possible
            ;; expansion
            :predicate (not (string= (emmet-transform tap)
                                     tap))
            ;; Expand Emmet Template On Match
            :exit-function (lambda (str status)
                             (when (eql status 'finished)
                               (emmet-expand-line nil)))
            ;; Allow for other completions to follow
            :exlcusive 'no)))

  (defun emmet-setup-capf ()
    (setq-local completion-at-point-functions
                (add-to-list 'completion-at-point-functions
                             'my/emmet-expand-capf
                             t)))
  (add-hook 'emmet-mode-hook 'emmet-setup-capf)
#+end_src
** Programming Languages
*** C++
#+begin_src emacs-lisp
  (straight-use-package 'ccls)
  (straight-use-package 'google-c-style)

  (add-hook 'c-mode-hook #'lsp-deferred)
  (add-hook 'c++-mode-hook #'lsp-deferred)
  (add-hook 'cuda-mode-hook #'lsp-deferred)
  (add-hook 'objc-mode-hook #'lsp-deferred)

  (add-hook 'c-mode-hook #'google-set-c-style)
  (add-hook 'c++-mode-hook #'google-make-newline-indent)

  (setq ccls-args nil
        ccls-executable (executable-find "ccls"))
#+end_src
*** Dart
#+begin_src emacs-lisp
  (straight-use-package 'dart-mode)

  (add-to-list 'auto-mode-alist '("\\.dart\\'") 'dart-mode)
  (add-hook 'dart-mode-hook #'lsp-deferred)

  (setq lsp-dart-dap-flutter-hot-reload-on-save t
        lsp-dart-sdk-dir "~/.config/flutter/bin/cache/dart-sdk/")
#+end_src
*** Json
#+begin_src emacs-lisp
  (straight-use-package 'json-mode)
  (add-to-list 'auto-mode-alist '("\\.json\\'") 'json-mode)

  (defun my/json-mode-before-save-hook ()
    (when (eq major-mode 'json-mode)
      (json-pretty-print-buffer)))

  (defun my/json-array-of-numbers-on-one-line (encode array)
    "Print the arrays of numbers in one line."
    (let* ((json-encoding-pretty-print
            (and json-encoding-pretty-print
                 (not (loop for x across array always (numberp x)))))
           (json-encoding-separator (if json-encoding-pretty-print "," ", ")))
      (funcall encode array)))

  (add-hook 'json-mode-hook #'lsp-deferred)
  (add-hook 'before-save-hook #'my/jsom-mode-before-save-hook)
  (advice-add 'json-encode-array :around #'my/json-array-of-numbers-on-one-line)
#+end_src
*** Lisp
#+begin_src emacs-lisp
  (straight-use-package 'sly)
  (straight-use-package 'sly-asdf)
  (straight-use-package 'sly-quicklisp)
  (straight-use-package 'sly-repl-ansi-color)
  

  (setq sly-symbol-completion-mode nil
        sly-lisp-implementations
        `((sbcl ("sbcl") :coding-system utf-8-unix)
          (abcl ("abcl") :coding-system utf-8-unix)
          (ecl ("ecl") :coding-system utf-8-unix)))

  (with-eval-after-load 'sly
    (require 'sly-quicklisp)
    (require 'sly-repl-ansi-color)
    (require 'sly-asdf))

  (add-hook 'lisp-mode-hook #'sly-editing-mode)
#+end_src
*** PlantUML
#+begin_src emacs-lisp
  (straight-use-package 'plantuml-mode)

  (add-to-list 'auto-mode-alist '("\\.\\(plantuml\\|puml\\)\\'"))
  (setq plantuml-jar-path (expand-file-name "~/.local/lib/plantuml.jar"))
#+end_src
*** Python
#+begin_src emacs-lisp
  (straight-use-package 'python)
  (straight-use-package 'lsp-pyright)
  (straight-use-package 'blacken)
  (straight-use-package 'py-isort)
  (straight-use-package 'pyvenv)
  (straight-use-package 'pyenv-mode)

  (add-hook 'python-mode-hook #'(lambda ()
                                  (require 'lsp-pyright)
                                  (lsp-deferred)))

  (add-hook 'python-mode-hook #'blacken-mode)
  (setq blacken-line-length 79)



  (add-hook 'before-save-hook #'py-isort-before-save)
  (add-hook 'python-ts-mode-hook #'pyvenv-mode)
#+end_src
*** Rust
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)
  (straight-use-package 'rust-playground)

  (add-to-list 'auto-mode-alist '("\\.rs\\'") 'rust-mode)
  (setq lsp-rust-clippy-preference "on")

  (add-hook 'rust-mode-hook #'lsp-deferred)
  (setq lsp-rust-analyzer-inlay-hints-mode 1)
#+end_src
*** SQL
#+begin_src emacs-lisp
  (straight-use-package 'sql-indent)

  (add-to-list 'auto-mode-alist '("\\.sql\\'") 'sql-mode)
  (add-hook 'sql-mode-hook #'sqlind-minor-mode)
#+end_src
*** Style sheet
#+begin_src emacs-lisp
  (straight-use-package 'css-mode)
  (add-to-list 'auto-mode-alist '("\\.css\\'") 'css-mode)
  (setq css-indent-offset 2)
#+end_src
*** Typescript
#+begin_src emacs-lisp
  (straight-use-package 'typescript-mode)

  (add-to-list 'auto-mode-alist '("\\.\\(ts\\|tsx\\)\\'") 'typescript-mode)

  (add-hook 'typescript-mode-hook #'prettier-js-mode)
  (add-hook 'typescript-mode-hook #'lsp-deferred)

  (setq typescript-indent-level 2)
#+end_src
** Spell Checker
#+begin_src emacs-lisp
  (straight-use-package 'ispell)

  (defun my/switch-language ()
         "Switch between the English and French for ispell, flyspell, and LanguageTool."
         (interactive)
         (let* ((current-dictionary ispell-current-dictionary)
                (new-dictionary (if (string= current-dictionary "en_US") "fr_FR" "en_US")))
           (ispell-change-dictionary new-dictionary)
           (if (string= new-dictionary "fr_FR")
               (progn
                 (setq lsp-ltex-language "fr"))
             (progn
               (setq lsp-ltex-language "en-US")))
           (flyspell-buffer)
           (message "[✓] Dictionary switched to %s" new-dictionary)))

  (setq ispell-hunspell-dict-paths-alist '(("en_US" "/usr/share/hunspell/en_US.aff")
                                           ("fr_FR" "/usr/share/hunspell/fr_FR.aff")))
  ;; Save words in the personal dictionary without asking.
  (setq ispell-silently-savep t)
  (setenv "LANG" "en_US")
  (cond ((executable-find "hunspell")
         (setq ispell-program-name "hunspell")
         (setq ispell-local-dictionary-alist '(("en_US"
                                                "[[:alpha:]]"
                                                "[^[:alpha:]]"
                                                "['’-]"
                                                t
                                                ("-d" "en_US" )
                                                nil
                                                utf-8)
                                               ("fr_FR"
                                                "[[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]"
                                                "[^[:alpha:]ÀÂÇÈÉÊËÎÏÔÙÛÜàâçèéêëîïôùûü]"
                                                "['’-]"
                                                t
                                                ("-d" "fr_FR")
                                                nil
                                                utf-8))))
        ((executable-find "aspell")
         (setq ispell-program-name "aspell")
         (setq ispell-extra-args '("--sug-mode=ultra"))))
  ;; Ignore file sections for spell checking.
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_align" . "#\\+end_align"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_align*" . "#\\+end_align*"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_equation" . "#\\+end_equation"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_equation*" . "#\\+end_equation*"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_example" . "#\\+end_example"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_labeling" . "#\\+end_labeling"))
  (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
  (add-to-list 'ispell-skip-region-alist '("\\$" . "\\$"))
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
#+end_src
** Terminal
#+begin_src emacs-lisp
  (straight-use-package 'vterm)
  (require 'vterm)

  (global-set-key (kbd "C-c t") 'vterm-other-window)
#+end_src
** Org-Mode
#+begin_src emacs-lisp
  (setq org-archive-location "~/Documents/Org/archives/%s::"
        org-blank-before-new-entry '((heading . t)
                                     (plain-list-item . t))
        org-confirm-babel-evaluate nil
        org-cycle-include-plain-lists 'integrate
        org-ellipsis " ▾"
        org-export-backends '(ascii beamer html icalendar latex man md org texinfo)
        org-hide-emphasis-markers t
        org-log-done 'time
        org-log-into-drawer t
        org-modules '(org-crypt
                      org-habit
                      org-mouse
                      org-protocol
                      org-tempo)
        org-refile-use-cache nil
        org-refile-use-outline-path nil
        org-startup-with-inline-images t
        org-use-effective-time t
        org-yank-adjusted-subtrees t)
#+end_src
** Bullets
#+begin_src emacs-lisp
  (straight-use-package 'org-bullets)
  (add-hook 'org-mode-hook #'org-bullets-mode)
#+end_src
** Browser
#+begin_src emacs-lisp
  (require 'browse-url)
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "qutebrowser")
#+end_src
** Rainbows
#+begin_src emacs-lisp
  (straight-use-package 'rainbow-mode)
  (straight-use-package 'rainbow-delimiters)

  (add-hook 'prog-mode-hook #'rainbow-mode)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
** Which-key
#+begin_src emacs-lisp
  (straight-use-package 'which-key)
  (straight-use-package 'which-key-posframe)

  (setq which-key-idle-delay 0.5)
  (which-key-mode t)
  (which-key-posframe-mode t)
#+end_src
** Snippets
#+begin_src emacs-lisp
  (straight-use-package 'yasnippet-snippets)
  (straight-use-package 'yasnippet)
  (straight-use-package 'react-snippets)

  (with-eval-after-load 'yasnippet
    (yasnippet-snippets-initialize t))
#+end_src
